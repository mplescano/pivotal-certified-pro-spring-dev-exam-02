/*plugins {*/
    /*id 'java'*/
    //id 'org.javamodularity.moduleplugin' version '1.8.15' apply false
/*}*/

allprojects {
    apply plugin: 'java'
    group 'com.apress.cems'
    version '2.0-SNAPSHOT'
}

/*subprojects {*/
    /*repositories {*/
        /*mavenLocal()*/
        /*mavenCentral()*/
        /*maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }*/
        /*maven { url "https://repo.spring.io/snapshot/" }*/
        /*maven { url "https://repo.spring.io/milestone" }*/
        /*maven { url "https://plugins.gradle.org/m2/" }*/
        /*maven {url "https://projectlombok.org/edge-releases"}*/
    /*}*/
/*}*/

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

ext {
    springBootVersion = '2.7.5'

    //testing
    easymockVersion = '4.0.2'
    jmockVersion = '2.10.0-RC3'

    // db
    ojdbcVersion = '12.2.0.1'

    //view technologies
    poiVersion = '4.1.0'
    itextVersion = '5.5.13.1'

    //microservices
    cloudReleaseTrainVersion ='2020.0.4'

    //we group libraries by their purpose so we can import them easier in the modules
    boot = [
            springBootPlugin: "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion",
            bom: "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
    ]

    boot_bom = [
            starter         : "org.springframework.boot:spring-boot-starter",
            starterWeb      : "org.springframework.boot:spring-boot-starter-web",
            starterWebflux      : "org.springframework.boot:spring-boot-starter-webflux",
            starterJetty    : "org.springframework.boot:spring-boot-starter-jetty",
            starterAop      : "org.springframework.boot:spring-boot-starter-aop",
            starterSecurity : "org.springframework.boot:spring-boot-starter-security",
            starterJpa      : "org.springframework.boot:spring-boot-starter-data-jpa",
            starterMongo    : "org.springframework.boot:spring-boot-starter-data-mongodb",
            starterMongoReactive    : "org.springframework.boot:spring-boot-starter-data-mongodb-reactive",
            starterTest     : "org.springframework.boot:spring-boot-starter-test",
            actuator        : "org.springframework.boot:spring-boot-starter-actuator",
            devtools        : "org.springframework.boot:spring-boot-devtools",
            starterThymeleaf: "org.springframework.boot:spring-boot-starter-thymeleaf",
            starterMustache : "org.springframework.boot:spring-boot-starter-mustache",
            prometheus      : "io.micrometer:micrometer-registry-prometheus",
            annotationProcessor: "org.springframework.boot:spring-boot-configuration-processor",
            starterR2dbc : "org.springframework.boot:spring-boot-starter-data-r2dbc",
            starterR2dbcH2 : "io.r2dbc:r2dbc-h2"
    ]

    spring_bom = [
            beans          : "org.springframework:spring-beans",
            contextSupport : "org.springframework:spring-context-support",
            jdbc           : "org.springframework:spring-jdbc",
            orm            : "org.springframework:spring-orm",
            test           : "org.springframework:spring-test",
            web            : "org.springframework:spring-web",
            webmvc         : "org.springframework:spring-webmvc",
            data           : "org.springframework.data:spring-data-jpa",
            mongo          : "org.springframework.data:spring-data-mongodb",
            r2dbcData      : "org.springframework.data:spring-data-r2dbc",
            securityWeb    : "org.springframework.security:spring-security-web",
            securityTaglibs: "org.springframework.security:spring-security-taglibs",
            securityConfig : "org.springframework.security:spring-security-config",
            securityTest   : "org.springframework.security:spring-security-test",
            dataBom         : "org.springframework.data:spring-data-releasetrain",
            relational      : "org.springframework.data:spring-data-relational",
    ]

    cloud = [
            bom           : "org.springframework.cloud:spring-cloud-dependencies:$cloudReleaseTrainVersion"
    ]

    cloud_bom = [
            dataCommons   : "org.springframework.data:spring-data-commons",
            cloudStarter  : "org.springframework.cloud:spring-cloud-starter-config",
            eurekaServer  : "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server",
            eurekaClient  : "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client",
    ]

    testing_misc = [
            easymock      : "org.easymock:easymock:$easymockVersion",
            jmockju4      : "org.jmock:jmock-junit4:$jmockVersion",
            jmockju5      : "org.jmock:jmock-junit5:$jmockVersion"
    ]

    testing_bom = [
            api           : "org.junit.jupiter:junit-jupiter-api",
            engine        : "org.junit.jupiter:junit-jupiter-engine",
            vintageEngine : "org.junit.vintage:junit-vintage-engine",
            mockitoAll    : "org.mockito:mockito-core",
            mockito       : "org.mockito:mockito-junit-jupiter",
            platformRunner: "org.junit.platform:junit-platform-runner",
            mongo         : "de.flapdoodle.embed:de.flapdoodle.embed.mongo",
            hamcrest      : "org.hamcrest:hamcrest",
            springMockMvc : "io.rest-assured:spring-mock-mvc",
            nettyReactor  : "io.projectreactor.netty:reactor-netty",
            reactorTest   : "io.projectreactor:reactor-test",
            restAssured   : "io.rest-assured:rest-assured"
    ]

    misc = [
            inject           : "javax.inject:javax.inject:1",
            poi              : "org.apache.poi:poi:$poiVersion",
            itext            : "com.itextpdf:itextpdf:$itextVersion"
    ]

    misc_bom = [
            h2               : "com.h2database:h2",
            jsr250           : "javax.annotation:javax.annotation-api",
            javaxValidation  : "javax.validation:validation-api",
            javaxPersistence : "org.eclipse.persistence:javax.persistence",
            lang3            : "org.apache.commons:commons-lang3",
            slf4j            : "org.slf4j:slf4j-api",
            logback          : "ch.qos.logback:logback-classic",
            aspectjweaver    : "org.aspectj:aspectjweaver",
            hikari           : "com.zaxxer:HikariCP",
            jstl             : "javax.servlet:jstl",
            servletApi       : "javax.servlet:javax.servlet-api",
            asm              : "asm:asm",
            thymeleaf        : "org.thymeleaf:thymeleaf-spring5",
            thymeleafSecurity: "org.thymeleaf.extras:thymeleaf-extras-springsecurity5",
            jacksonDatabind  : "com.fasterxml.jackson.core:jackson-databind",
            jacksonJsr310    : "com.fasterxml.jackson.datatype:jackson-datatype-jsr310",
            jaxbApi          : "javax.xml.bind:jaxb-api",
            projectReactor   : "io.projectreactor:reactor-core",
            ojdbc            : "com.oracle.database.jdbc:ojdbc8",
            lombok          : "org.projectlombok:lombok",
            mongodbServer    : "de.flapdoodle.embed:de.flapdoodle.embed.mongo"
    ]

    hibernate_bom = [
            validator : "org.hibernate.validator:hibernate-validator",
            ehcache   : "org.hibernate:hibernate-ehcache",
            em        : "org.hibernate:hibernate-entitymanager",
            core      : "org.hibernate:hibernate-core",
            javaxELApi: "org.glassfish:jakarta.el"
    ]
}

/*repositories {*/
    /*mavenLocal()*/
    /*mavenCentral()*/
    /*maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }*/
    /*maven { url "https://repo.spring.io/snapshot/" }*/
    /*maven { url "https://repo.spring.io/milestone" }*/
    /*maven { url "https://plugins.gradle.org/m2/" }*/
    /*maven {url "https://projectlombok.org/edge-releases"}*/
/*}*/

task allDeps {
    doLast {
        description 'Task used to display dependencies for all modules in the project'
        subprojects.each { p ->
            println()
            println " $p.name ".center(60, '*')
            println()
            p.configurations.all.findAll { !it.allDependencies.empty }.each { c ->
                println " ${c.name} ".center(60, '-')
                c.allDependencies.each { dep ->
                    println "$dep.group:$dep.name:$dep.version"
                }
                println "-" * 60
            }
        }
    }
}